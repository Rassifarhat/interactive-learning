Describe the analysis stage of the program development life cycle. What are the key activities performed during this stage?,"The analysis stage involves investigating the problem and the current system (if one exists). Key activities include clearly defining the problem and its requirements, often documented in a 'requirements specification', and planning a potential solution."
Explain the difference between top-down and bottom-up approaches to problem-solving in the context of program design. Provide a brief example of when one might be preferred over the other.,"The top-down approach starts with the overall problem and breaks it down into smaller sub-problems through stepwise refinement, while the bottom-up approach begins with small components and builds up to a complete solution. Top-down is useful for complex problems without pre-existing components, whereas bottom-up works well when reliable modules already exist."
What is the primary purpose of a structure chart in program design? What information does it typically convey about a program's modular structure?,"A structure chart visually represents the modular structure of a program. It shows how the program is divided into modules, the hierarchical relationships between them, and the parameters passed between modules, illustrating their interfaces and control flow."
Explain the concept of stub testing. In what situations would this testing method be particularly useful during software development?,Stub testing involves creating simplified placeholder modules (stubs) that mimic the behavior of not-yet-implemented procedures. It is particularly useful for testing the user interface and program flow before all underlying functionalities are fully developed.
What is the fundamental difference between black-box testing and white-box testing? Describe the focus and information used in each approach.,"Black-box testing evaluates a program's functionality without knowledge of its internal code, focusing on inputs and outputs against the specification. White-box testing uses knowledge of the internal code structure to ensure every path and condition is exercised."
Define a run-time error and provide a common example. How do run-time errors typically manifest during program execution?,"A run-time error occurs during program execution, causing it to halt or crash. A common example is division by zero. Such errors manifest when unexpected inputs or conditions trigger faults that the code does not handle."
"What is a trace table, and how is it used in the process of dry-running an algorithm? Explain its value in identifying errors.","A trace table is used to manually step through an algorithm, recording variable values and conditions at each step. It helps identify logic errors by showing the exact flow and state changes of the algorithm with test data."
"Differentiate between normal, abnormal (erroneous), and boundary (extreme) test data. Why is it important to use all three types when testing software?","Normal test data are typical valid inputs the system should accept. Abnormal data are invalid inputs that should be rejected gracefully. Boundary data are values at the limits of valid ranges, including just inside and outside those limits. Using all three ensures comprehensive coverage and robust error handling."
Describe the main goal of corrective maintenance in software development. What triggers this type of maintenance activity?,"The main goal of corrective maintenance is to fix defects or bugs discovered after the software has been deployed. It is triggered when users report incorrect behavior, crashes, or unexpected results due to logic or run-time errors."
Explain the purpose of adaptive maintenance. Provide an example of a scenario that would necessitate adaptive maintenance.,Adaptive maintenance involves modifying a program to meet new requirements or changes in the environment. An example would be updating a two-player game to allow a single player to compete against a computer opponent.
"Discuss the importance of software testing and debugging in the software development life cycle. Provide examples of different testing methods and their roles in ensuring software quality.","Software testing identifies defects and ensures software meets requirements. Methods include unit testing (testing individual components), integration testing (testing combined modules), system testing (end-to-end validation), and user acceptance testing (ensuring user needs are met). Debugging locates and fixes errors. Comprehensive testing and debugging improve reliability and user satisfaction."
"Explain the concept of version control in software development. Analyze the benefits of using version control systems (e.g., Git) for collaborative projects.","Version control systems track changes to code, enable collaboration, and provide history and rollback capabilities. Git allows multiple developers to work concurrently, manage branches, and resolve conflicts. Benefits include improved collaboration, code safety, and project organization."

"What is the fundamental difference between machine code and assembly language? Explain why programmers often prefer to write in assembly language despite its lower level compared to high-level languages.,"Machine code is the raw binary language directly understood by the CPU, consisting of opcodes and operands encoded as bits. Assembly language uses mnemonics and symbolic representations for these binary instructions, making code more readable and easier to write and debug. Programmers prefer assembly language because it abstracts away binary encoding details, supports comments and labels, and reduces errors compared to writing raw machine code."
"Describe the role of an assembler in the software development process. What are two advantages that assembly language programmers gain by using an assembler instead of directly writing machine code?,"An assembler translates assembly language source code into executable machine code. It automates the conversion of mnemonics and operands into their binary equivalents and resolves symbolic addresses using symbol tables. Advantages include automation of error-prone binary encoding and support for symbolic names and labels, improving code readability and maintainability."
"Explain the purpose of symbolic addressing in assembly language programming. How does a two-pass assembler handle symbolic addresses, especially forward references, during the assembly process?","Symbolic addressing allows programmers to use labels instead of numeric memory addresses, making code easier to understand and modify. A two-pass assembler first scans the code to build a symbol table mapping labels to addresses (pass one), then uses this table in the second pass to resolve all symbolic references and generate the final machine code, handling forward references without errors."
"What is an addressing mode in the context of computer architecture? Briefly describe the difference between direct addressing and immediate addressing, providing a simple example for each.","An addressing mode defines how an instruction’s operand specifies the data to be used. In direct addressing, the operand is the memory address of the data (e.g., LDD 100 loads the value at address 100). In immediate addressing, the operand is the value itself (e.g., LDM #5 loads the value 5 directly into the accumulator)."
"Give two examples of data movement instructions commonly found in assembly language. For each example, explain the direction of data transfer (e.g., from memory to register).","Examples include LDD <address>, which loads data from the specified memory address into the accumulator (memory→ACC), and STO <address>, which stores the contents of the accumulator into the specified memory address (ACC→memory)."
How do compare and jump instructions work together to implement control flow in assembly language programs? Explain the role of the status register in conditional jump instructions.,"Compare instructions (e.g., CMP <address>) subtract one value from another and set flags in the status register (e.g., zero, negative). Conditional jump instructions (e.g., JPE, JPN) then check these flags and alter execution flow if conditions are met. The status register holds the comparison results that determine whether a jump occurs."
"Describe the purpose of shift instructions in assembly language. Differentiate between a left logical shift and a right logical shift, mentioning their potential use in basic arithmetic operations.","Shift instructions move bits within a register. A left logical shift moves all bits one position left, inserting 0 at the least significant bit and shifting out the most significant bit (useful for multiplying by two). A right logical shift moves bits one position right, inserting 0 at the most significant bit and shifting out the least significant bit (useful for dividing unsigned values by two)."
"What are bitwise logical operations, and how are they typically used in assembly language programming? Provide an example of a bitwise AND operation and explain its effect.","Bitwise logical operations perform logical functions on each bit of operands. They are used for masking, setting, clearing, or toggling specific bits. For example, AND #B11110000 with a register clears the lower four bits while preserving the upper four bits, effectively masking out certain bits."
Explain the concept of overflow in computer arithmetic. How can the status register (specifically the overflow flag) help in detecting this condition after an arithmetic operation?,"Overflow occurs when the result of an arithmetic operation exceeds the range representable with the given number of bits, causing incorrect values. The overflow flag in the status register is set when such a condition is detected, allowing the program to handle the error or adjust its calculations."
"What is a trace table, and how is it useful for debugging assembly language programs? Briefly describe the process of performing a dry run of a program using a trace table.","A trace table is a tool for manually recording the values of registers and memory at each step of program execution. To use it, you simulate the program instruction by instruction, noting the changes in the accumulator, index register, program counter, and variables. This helps identify logical errors and verify correct behavior."
What is Machine Code?,"The binary instructions directly understood and executed by the CPU, consisting of opcodes and operands."
What is Opcode?,The part of a machine code instruction that specifies the operation to be performed.
What is Operand?,The part of a machine code instruction that provides data or the address of data for the operation.
What is Instruction Set?,The complete collection of machine code instructions that a specific processor can execute.
What is Assembly Language?,A low-level programming language that uses mnemonics to represent machine code instructions.
What is Mnemonic?,A symbolic abbreviation used in assembly language to represent an opcode.
What is Assembler?,A program that translates assembly language source code into machine code.
What is Comments?,"Annotations in assembly language code ignored by the assembler, used to explain code."
What is Symbolic Names?,User-defined names assigned to constants or labels in assembly language programs.
What is Labels?,Symbolic names representing memory addresses used for jumps and data references.
What is Macros?,Sequences of assembly instructions grouped under a single name for reuse.
What is Directives?,"Instructions to the assembler that control assembly (e.g., defining memory areas)."
What is Symbolic Addressing?,Using labels instead of numeric addresses to refer to memory locations in assembly code.
What is Relative Addressing?,Specifying an operand address as an offset from a base register value.
What is Absolute Addressing?,Using a fixed numeric memory address directly in the instruction.
What is Two-Pass Assembler?,"An assembler that processes code twice: first to build a symbol table, then to generate machine code."
What is Symbol Table?,A data structure mapping symbolic labels to their corresponding memory addresses.
What is Opcode Lookup Table?,A table mapping assembly mnemonics to their binary opcode values for the assembler.
What is Addressing Mode?,"The method by which an instruction's operand specifies the data to be used (immediate, direct, etc.)."
What is Immediate Addressing?,An addressing mode where the operand is the actual value to be used by the instruction.
What is Direct Addressing?,An addressing mode where the operand is the memory address where the data is stored.
What is Indirect Addressing?,An addressing mode where the operand is a memory address that contains the address of the data.
What is Indexed Addressing?,An addressing mode where the operand is a base address added to an index register to get the actual address.
What is Data Movement Instructions?,"Assembly instructions that transfer data between registers and memory (e.g., LDD, STO)."
What is Input/Output Instructions?,"Instructions that handle data transfer between the processor and external devices (e.g., IN, OUT)."
What is Compare Instructions?,Instructions that compare two values and set flags in the status register based on the result.
What is Jump Instructions?,Instructions that change execution flow by setting the program counter to a new address.
What is Arithmetic Instructions?,"Instructions that perform mathematical operations (e.g., ADD, SUB, INC, DEC)."
What is Shift Instructions?,Instructions that move bits left or right within a register (logical or arithmetic shifts).
What is Logical Instructions?,"Bitwise operations on register contents (e.g., AND, OR, XOR)."
What is Register Transfer Notation?,"A notation for describing data transfers between registers and memory (e.g., MAR ← [PC])."
What is Status Register?,"A special register containing flags that indicate the outcome of operations (carry, zero, overflow)."
What is Overflow?,A condition where an arithmetic result exceeds the representable range for the given number of bits.
What is Trace Table?,A table used to record register and memory values step by step during manual program execution.
What is Program Counter?,A register that holds the address of the next instruction to be fetched and executed.
"Discuss the evolution of programming languages from machine code to high-level languages. Analyze the impact of this evolution on software development efficiency and maintainability.","Programming languages evolved from machine code (binary instructions executed directly by hardware) to assembly (mnemonic codes for instructions) to high-level languages (abstract, human-readable syntax). High-level languages like FORTRAN, C, Java, and Python allow programmers to write complex logic without managing hardware details. This evolution improved efficiency by enabling code reuse, abstraction, and portability, and enhanced maintainability through structured programming, modularization, and error checking. It also broadened access to programming, fostering innovation and accelerating software development cycles."
"Compare and contrast compiled and interpreted languages, providing examples of each. Discuss the advantages and disadvantages of both approaches in terms of performance, portability, and use cases.","Compiled languages (e.g., C, C++) are translated into machine code before execution, resulting in fast, optimized binaries but requiring recompilation for different platforms. Interpreted languages (e.g., Python, JavaScript) are executed line-by-line by an interpreter, offering greater portability and ease of debugging but generally slower performance. Compiled languages excel in performance-critical applications, while interpreted languages are favored for rapid prototyping and cross-platform development. Some languages (e.g., Java) use a hybrid approach with bytecode and virtual machines."

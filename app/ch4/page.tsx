'use client';
import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

// Define TypeScript interfaces for our data structure
interface MindmapNode {
  name: string;
  id: string; // Unique identifier for the node
  summary?: string; // Optional detailed description
  children?: MindmapNode[];
}

// Define the structure returned by d3.hierarchy
interface HierarchyNode extends d3.HierarchyNode<MindmapNode> {}

// Define the structure for links generated by d3
interface HierarchyLink extends d3.HierarchyLink<MindmapNode> {}

// Define the main component
const ChapterFourMindmap: React.FC = () => { 
  const svgRef = useRef<SVGSVGElement>(null);
  const [infoContent, setInfoContent] = useState<string>('');
  const [activeNode, setActiveNode] = useState<string | null>(null);
  const [zoom, setZoom] = useState<number>(1);
  const zoomRef = useRef<d3.ZoomBehavior<SVGSVGElement, unknown> | null>(null);

  // Zoom control handlers
  const handleZoomIn = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 1.3);
    }
  };

  const handleZoomOut = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 0.7);
    }
  };

  const handleReset = () => {
    if (svgRef.current && zoomRef.current) {
      const width = 1200; 
      const height = 800;
      d3.select(svgRef.current)
        .transition()
        .duration(500)
        .call(
          zoomRef.current.transform,
          d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8)
        );
    }
  };

  // Define the data structure for the mindmap (Transformed from ReactFlow)
  const data: MindmapNode = {
    name: "Topic 4: Intro Organic Chemistry & Alkanes",
    id: "topic4",
    summary: "**Topic 4: Introductory Organic Chemistry and Alkanes**\n\n**Content:**\n- This section covers the fundamentals of organic chemistry\n- Includes the structure, naming, and reactions of organic compounds\n- Focus on alkanes and their properties\n\n**Tips & Tricks:**\n- Pay attention to nomenclature rules\n- Understand different types of isomerism\n- Know reaction mechanisms, especially free radical substitution",
    children: [
      // Section 4A (Branch 1)
      {
        name: "4A.1 What is Organic Chemistry?",
        id: "4A-1",
        summary: "**4A.1 What is Organic Chemistry?**\n\n**Content:**\n- Definition: Organic compounds are carbon-based molecules, often containing hydrogen\n- Most organic compounds have covalent bonds\n- Most organic compounds originate from living organisms or synthetic processes\n- Hydrocarbons = compounds of carbon and hydrogen only\n- Alkanes and cycloalkanes are saturated hydrocarbons (only single C–C bonds)\n\n**Tips & Tricks:**\n- Saturated = single bonds only\n- Unsaturated = contains C=C or C≡C double/triple bonds\n- Alkanes: straight chains\n- Cycloalkanes: rings with single bonds",
        children: [
          {
            name: "4A.2 Different Types of Formulae",
            id: "4A-2",
            summary: "**4A.2 Different Types of Formulae**\n\n**Content:**\n- Empirical formula – simplest whole number ratio of atoms\n- Molecular formula – actual number of atoms\n- Structural formula – shows atoms and functional groups in sequence\n- Displayed formula – shows all atoms and all bonds\n- Skeletal formula – carbon backbone as lines, H atoms omitted\n\n**Tips & Tricks:**\n- Don't confuse molecular with empirical\n- Learn how to convert between formulae (e.g., C₄H₁₀O in skeletal vs displayed)",
            children: [
              {
                name: "4A.3 Functional Groups and Homologous Series",
                id: "4A-3",
                summary: "**4A.3 Functional Groups and Homologous Series**\n\n**Content:**\n- Functional group: Atom/group that gives a molecule its chemical properties\n- e.g., –OH (alcohol), –COOH (acid)\n- Homologous series: Series of compounds with:\n- Same functional group\n- Same general formula (e.g., CₙH₂ₙ₊₂ for alkanes)\n- Gradual change in physical properties (e.g., boiling point ↑ with size)\n\n**Tips & Tricks:**\n- Methane to butane boiling points increase due to more London forces\n- Know general formulas by heart:\n- Alkanes: CₙH₂ₙ₊₂\n- Cycloalkanes: CₙH₂ₙ",
                children: [
                  {
                    name: "4A.4 Nomenclature (Naming Compounds)",
                    id: "4A-4",
                    summary: "**4A.4 Nomenclature (Naming Compounds)**\n\n**Content:**\n- Uses IUPAC rules\n- Names = prefix + root + suffix\n- Root = longest carbon chain\n- Prefix = side chains (methyl, ethyl, etc.)\n- Suffix = functional groups (e.g., -ol for alcohols)\n- Number carbon chain to give lowest numbers to substituents\n\n**Tips & Tricks:**\n- Learn prefixes: meth-, eth-, prop-, but- up to dec-\n- Side chains must be listed alphabetically, not by position\n- 2-methylpropane ≠ propane – branching matters!"
                  }
                ]
              }
            ]
          }
        ]
      },
      // Section 4A (Branch 2)
      {
        name: "4A.5 Structural Isomerism",
        id: "4A-5",
        summary: "**4A.5 Structural Isomerism**\n\n**Content:**\n- Isomers have same molecular formula, different structures\n- Types of structural isomerism:\n- Chain (different C-chain arrangement)\n- Position (different location of functional group)\n\n**Tips & Tricks:**\n- C₄H₁₀ has two chain isomers: butane and methylpropane\n- C₃H₇OH has two position isomers: 1-propanol, 2-propanol",
        children: [
          {
            name: "4A.6 Types of Reaction",
            id: "4A-6",
            summary: "**4A.6 Types of Reaction**\n\n**Content:**\n- Addition – reactant added across a double bond\n- Substitution – atom/group replaced by another\n- Elimination – removal of atom/group, often forming a double bond\n- Oxidation – increase in O, loss of H or e⁻\n- Reduction – gain of H or e⁻\n- Polymerisation – small monomers join to form a long chain polymer\n\n**Tips & Tricks:**\n- Bond fission:\n- Homolytic fission: Each atom gets 1 electron (forms radicals)\n- Heterolytic fission: Both electrons go to one atom (forms ions)",
            children: [
              {
                name: "4A.7 Hazards, Risks and Risk Assessments",
                id: "4A-7",
                summary: "**4A.7 Hazards, Risks and Risk Assessments**\n\n**Content:**\n- Hazard: The potential to cause harm\n- Risk: Likelihood of harm occurring\n- Risk assessments should consider:\n- Chemicals used\n- Conditions (heat, pressure)\n- Apparatus and volume\n\n**Tips & Tricks:**\n- Key symbols:\n- ☠️ Toxic\n- ☣️ Harmful\n- 🔥 Flammable\n- ⚠️ Corrosive\n- 🌡️ Oxidising"
              }
            ]
          }
        ]
      },
      // Section 4B
      {
        name: "4B.1 Alkanes from Crude Oil",
        id: "4B-1",
        summary: "**4B.1 Alkanes from Crude Oil**\n\n**Content:**\n- Alkanes are separated from crude oil by:\n- Fractional distillation – based on boiling points\n- Cracking – breaks long chains to short ones\n- Reforming – makes branched/cyclic alkanes from straight chains\n\n**Tips & Tricks:**\n- Don't forget:\n- Cracking: C₁₅H₃₂ → C₈H₁₈ + C₇H₁₄\n- Reforming example: heptane → methylcyclohexane",
        children: [
          {
            name: "4B.2 Alkanes as Fuels",
            id: "4B-2",
            summary: "**4B.2 Alkanes as Fuels**\n\n**Content:**\n- Complete combustion: alkane + O₂ → CO₂ + H₂O\n- Incomplete combustion: forms CO and C (soot)\n\n**Tips & Tricks:**\n- Toxic gases from combustion:\n- CO: binds to haemoglobin\n- NOₓ: formed at high temp, causes acid rain\n- SO₂: from sulfur impurities",
            children: [
              {
                name: "4B.3 Alternative Fuels",
                id: "4B-3",
                summary: "**4B.3 Alternative Fuels**\n\n**Content:**\n- Biofuels: biodiesel, bioethanol – renewable\n- Pros:\n- Lower net CO₂\n- Renewable\n- Cons:\n- May affect food supply\n- Not always carbon neutral (emissions in transport etc.)\n\n**Tips & Tricks:**\n- Terms:\n- Carbon neutral: CO₂ absorbed = CO₂ released",
                children: [
                  {
                    name: "4B.4 Substitution Reactions of Alkanes",
                    id: "4B-4",
                    summary: "**4B.4 Substitution Reactions of Alkanes**\n\n**Content:**\n- Free radical substitution of alkanes with halogens (e.g., Cl₂ under UV)\n- 3 steps:\n- Initiation: Cl₂ → 2Cl•\n- Propagation: CH₄ + Cl• → CH₃• + HCl, then CH₃• + Cl₂ → CH₃Cl + Cl•\n- Termination: radicals combine (e.g., Cl• + Cl• → Cl₂)\n\n**Tips & Tricks:**\n- Likely question:\n- Write equations for all 3 steps in free radical substitution\n- Beware of multiple substitutions (e.g., CH₂Cl₂ from CH₄)"
                  }
                ]
              }
            ]
          }
        ]
      },
      // Key Takeaways (as a separate branch from root)
      {
        name: "KEY TAKEAWAYS FOR EXAM",
        id: "key-takeaways",
        summary: "**KEY TAKEAWAYS FOR EXAM**\n\n**Tips & Tricks:**\n- Learn all formula types and how to convert between them\n- Master naming rules and isomerism\n- Know reaction types and mechanisms (esp. substitution)\n- Understand combustion equations and pollutants\n- Memorise risk and safety symbols and free radical steps"
        // No children for takeaways node
      }
    ]
  };

  useEffect(() => {
    if (!svgRef.current || !data) return;

    const width = 1200;
    const height = 800;
    const radius = Math.min(width, height) / 2 * 0.8;

    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [-width / 2, -height / 2, width, height])
      .style('font', '10px sans-serif');

    // Clear previous render
    svg.selectAll('*').remove(); 

    // Create root container for zoom/pan
    const g = svg.append('g');

    // Define the tree layout generator for radial layout
    const tree = d3.tree<MindmapNode>()
      .size([2 * Math.PI, radius])
      .separation((a, b) => (a.parent == b.parent ? 1 : 2) / a.depth);

    // Create the hierarchy from the data
    const root = tree(d3.hierarchy(data)
        .sort((a, b) => d3.ascending(a.data.name, b.data.name)));

    // Set up zoom behavior
    zoomRef.current = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.2, 3]) // Zoom limits
      .on('zoom', (event) => {
        g.attr('transform', event.transform);
        setZoom(event.transform.k);
      });

    // Apply zoom to the SVG element
    svg.call(zoomRef.current);

    // Initial transform: Center the graph and apply initial scale
    const initialTransform = d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8);
    svg.call(zoomRef.current.transform, initialTransform);
    g.attr('transform', initialTransform.toString());


    // Links
    g.append('g')
      .attr('fill', 'none')
      .attr('stroke', '#555')
      .attr('stroke-opacity', 0.4)
      .attr('stroke-width', 1.5)
      .selectAll('path')
      .data(root.links())
      .join('path')
      .attr('d', d3.linkRadial<d3.HierarchyLink<MindmapNode>, d3.HierarchyPointNode<MindmapNode>>()
          .angle(d => d.x)
          .radius(d => d.y));

    // Nodes
    const node = g.append('g')
      .selectAll('g')
      .data(root.descendants())
      .join('g')
      .attr('transform', d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`);

    node.append('circle')
      .attr('r', 4.5)
      .attr('fill', d => d.children ? '#555' : '#999')
      .attr('stroke', '#fff')
      .attr('stroke-width', 1.5)
      .style('cursor', 'pointer')
      .on('click', (event, d) => {
        // Update info content on click
        setInfoContent(d.data.summary || d.data.name);
        setActiveNode(d.data.id); // Set active node id

        // Prevent zoom trigger on node click
        event.stopPropagation();
      });

    // Text labels
    node.append('text')
      .attr('dy', '0.31em')
      .attr('x', d => d.x < Math.PI === !d.children ? 6 : -6)
      .attr('text-anchor', d => d.x < Math.PI === !d.children ? 'start' : 'end')
      .attr('transform', d => d.x >= Math.PI ? 'rotate(180)' : null)
      .text(d => d.data.name)
      .clone(true).lower()
      .attr('stroke', 'white');

  }, [data]); // Rerun effect if data changes

  return (
    <div style={{ display: 'flex', height: '100vh', flexDirection: 'column' }}>
      <div style={{ display: 'flex', padding: '10px', borderBottom: '1px solid #ccc' }}>
        {/* Info Display Area */}
        <div style={{ flexGrow: 1, marginRight: '10px', padding: '10px', border: '1px solid #eee', borderRadius: '4px', minHeight: '80px', maxHeight: '200px', overflowY: 'auto', backgroundColor: '#f9f9f9' }}>
          {infoContent ? (
            <div dangerouslySetInnerHTML={{ __html: infoContent.replace(/\n/g, '<br />') }} />
          ) : (
            <p>Click on a node to see details.</p>
          )}
        </div>
        {/* Zoom Controls */}
        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
          <button onClick={handleZoomIn} style={{ marginBottom: '5px' }}>Zoom In (+)</button>
          <button onClick={handleZoomOut} style={{ marginBottom: '5px' }}>Zoom Out (-)</button>
          <button onClick={handleReset}>Reset</button>
        </div>
      </div>
      <div style={{ flexGrow: 1, overflow: 'hidden' }}>
        <svg ref={svgRef}></svg>
      </div>
    </div>
  );
};

export default ChapterFourMindmap;

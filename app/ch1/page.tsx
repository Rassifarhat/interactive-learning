'use client';
import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

// Define TypeScript interfaces for our data structure
interface MindmapNode {
  name: string;
  id: string; // Unique identifier for the node
  summary?: string; // Optional detailed description
  children?: MindmapNode[];
}

// Define the structure returned by d3.hierarchy
interface HierarchyNode extends d3.HierarchyNode<MindmapNode> {}

// Define the structure for links generated by d3
interface HierarchyLink extends d3.HierarchyLink<MindmapNode> {}

// Define the main component
const ChapterOneMindmap: React.FC = () => {
  const svgRef = useRef<SVGSVGElement>(null);
  const [infoContent, setInfoContent] = useState<string>('');
  const [activeNode, setActiveNode] = useState<string | null>(null);
  const [zoom, setZoom] = useState<number>(1);
  const zoomRef = useRef<d3.ZoomBehavior<SVGSVGElement, unknown> | null>(null);

  // Zoom control handlers
  const handleZoomIn = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 1.3);
    }
  };

  const handleZoomOut = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 0.7);
    }
  };

  const handleReset = () => {
    if (svgRef.current && zoomRef.current) {
      const width = 1200;
      const height = 800;
      d3.select(svgRef.current)
        .transition()
        .duration(500)
        .call(
          zoomRef.current.transform,
          d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8)
        );
    }
  };

  // Define the data structure for the mindmap
  const data: MindmapNode = {
    name: "Topic 1: Formulae, Equations and Amount of Substance",
    id: "root",
    summary: "The foundation of chemistry calculations and reactions",
    children: [
      {
        name: "1A: Atoms, Elements & Molecules",
        id: "1A",
        summary: "**Content:** Understanding the basic building blocks of chemistry and their relationships.\n**Key Points:**\n- Atom: Smallest part of an element.\n- Element: Substance of one type of atom.\n- Molecule: 2+ atoms bonded.\n- Compound: Atoms of different elements bonded.\n- Ion: Charged species (cation+, anion-).\n- Monatomic: Single atoms (He).\n- Diatomic: Two atoms (O₂, N₂).\n- Polyatomic: Several atoms (P₄, CH₄).\n**Exam Tips:** Be precise distinguishing atoms, elements, molecules, compounds.",
      },
      {
        name: "1B: Chemical Equations & Reactions",
        id: "1B", // Grouping node
        summary: "Representing chemical changes accurately.",
        children: [
          {
            name: "1B1: Writing Chemical Equations",
            id: "1B1",
            summary: "**Content:** How to represent chemical reactions with balanced equations and state symbols.\n**Key Points:**\n- Show reactants → products.\n- Must be balanced.\n- State symbols: (s), (l), (g), (aq).\n- Reversible use ⇌.\n- Use coefficients (e.g., 2H₂O).\n- Know common formulae.\n**Exam Tips:** Always check balance. Note state symbols (l) vs (aq).",
          },
          {
            name: "1B2: Typical Reactions of Acids",
            id: "1B2",
            summary: "**Content:** Key reaction types involving acids.\n**Key Points:**\n- Acid + metal → salt + hydrogen.\n- Acid + oxide/hydroxide → salt + water.\n- Acid + alkali → salt + water (neutralization).\n- Acid + carbonate → salt + water + CO₂.\n- Acid + hydrogencarbonate → similar.\n**Exam Tips:** Learn patterns. Be ready for ionic equations (H⁺ + OH⁻ → H₂O).",
          },
          {
            name: "1B3: Displacement Reactions",
            id: "1B3",
            summary: "**Content:** Reactions where one element displaces another.\n**Key Points:**\n- More reactive displaces less reactive.\n- Metal A + Cmpd(B) → Metal B + Cmpd(A).\n- Are redox reactions.\n- Example: Mg + CuSO₄ → Cu + MgSO₄.\n- Reactivity series determines outcome.\n**Exam Tips:** Identify oxidized/reduced species. More reactive metal displaces less reactive.",
          },
          {
            name: "1B4: Precipitation Reactions",
            id: "1B4",
            summary: "**Content:** Reactions forming insoluble products (precipitates).\n**Key Points:**\n- Used for tests/equations.\n- Tests: CO₂/limewater; Ba²⁺/sulfates; Ag⁺/halides.\n- Ionic eqn focuses on precipitate ions.\n- Example: AgNO₃(aq) + NaCl(aq) → AgCl(s) + NaNO₃(aq).\n- Simplified: Ag⁺(aq) + Cl⁻(aq) → AgCl(s).\n**Exam Tips:** Write full & simplified ionic eqns. Exclude spectator ions.",
          },
        ]
      },
      {
        name: "1C: Mole Concepts & Calculations",
        id: "1C", // Grouping node
        summary: "Quantitative chemistry using the mole.",
        children: [
          {
            name: "1C1: Comparing Masses",
            id: "1C1",
            summary: "**Content:** Understanding relative atomic mass (Aᵣ) and related concepts.\n**Key Points:**\n- Aᵣ: Weighted mean mass vs 1/12 C-12.\n- Mᵣ (molecular): Sum of Aᵣ in molecule.\n- Mᵣ (formula): Sum of Aᵣ in ionic formula unit.\n- Molar mass (M): Mass per mole (g·mol⁻¹).\n- Example: Mᵣ(H₂O) = 18.0, M = 18.0 g·mol⁻¹.\n**Exam Tips:** Use data booklet Aᵣ. Careful with water of crystallization.",
          },
          {
            name: "1C2: Calculations Involving Moles",
            id: "1C2",
            summary: "**Content:** Using the mole concept.\n**Key Points:**\n- Mole: 6.02×10²³ particles (Avogadro constant, L).\n- Calc: n = m/M.\n- Counting particles: Number = n × L.\n- Identify particle type (atoms, molecules, ions...).\n- Mass ↔ Amount conversion is key.\n**Exam Tips:** Rearrange n=m/M. Use units. Specify atoms vs molecules.",
          },
          {
            name: "1C3: Reacting Masses",
            id: "1C3",
            summary: "**Content:** Using balanced equations for mass calculations.\n**Key Points:**\n- Steps: Molar masses → moles → equation ratios → masses.\n- Balanced equations give stoichiometric ratios.\n- Example: N₂ + 3H₂ → 2NH₃ (1:3:2 ratio).\n- Amount ratios = coefficient ratios.\n- Calc amount A from known amount B.\n**Exam Tips:** Use mole ratios from balanced eqn, not empirical. Watch for limiting reactant.",
          },
          {
            name: "1C4: Reaction Yield",
            id: "1C4",
            summary: "**Content:** Theoretical, actual, percentage yields.\n**Key Points:**\n- Theoretical: Max product from eqn.\n- Actual: Measured product mass.\n- Percentage: (Actual/Theoretical) × 100.\n- Low yield reasons: Reversible, side reactions, loss.\n- Important industrially.\n**Exam Tips:** Show theoretical yield working. Explain <100% yield reasons.",
          },
          {
            name: "1C5: Atom Economy",
            id: "1C5",
            summary: "**Content:** Assessing reaction efficiency by atom utilization.\n**Key Points:**\n- Atom Economy = (Molar mass desired product / Sum molar masses all products) × 100.\n- Addition reactions = 100% AE.\n- Substitution/elimination have lower AE.\n- Important for green chemistry.\n- Concept by Barry Trost.\n**Exam Tips:** Distinguish yield vs AE. AE depends only on balanced eqn.",
          },
        ]
      },
      {
        name: "1D: Formulae",
        id: "1D", // Grouping node
        summary: "Determining chemical formulae.",
        children: [
          {
            name: "1D1: Empirical Formulae",
            id: "1D1",
            summary: "**Content:** Finding the simplest whole-number ratio of atoms.\n**Key Points:**\n- Steps: mass/Aᵣ → divide by smallest → whole numbers.\n- From % composition or experimental data.\n- Combustion analysis for CHO compounds.\n- Example: Glucose (CH₂O empirical, C₆H₁₂O₆ molecular).\n- O by difference: 100% - sum others.\n**Exam Tips:** Watch non-obvious ratios (e.g., 1:1.5 → 2:3). Use ≥2 sig figs.",
          },
          {
            name: "1D2: Molecular Formulae",
            id: "1D2",
            summary: "**Content:** Determining the actual number of atoms.\n**Key Points:**\n- Molecular = Empirical × n (n=whole number).\n- n = Molecular mass / Empirical formula mass.\n- Example: H₂O₂ (HO empirical).\n- Same empirical/molecular: CO₂, H₂O.\n- Use molar mass (e.g., from PV=nRT).\n**Exam Tips:** Practice conversions. Molecular must be whole multiple of empirical.",
          },
        ]
      },
      {
        name: "1E: Gases & Solutions",
        id: "1E", // Grouping node
        summary: "Calculations involving gases and solutions.",
        children: [
          {
            name: "1E1: Molar Volume Calculations",
            id: "1E1",
            summary: "**Content:** Calculations using molar volume.\n**Key Points:**\n- Molar vol: Vol of 1 mole gas (24 dm³ at r.t.p.).\n- r.t.p.: 298K, 100kPa.\n- Calc: volume = amount × molar volume.\n- For gases: Amount(mol) = Vol(dm³)/24.\n- Links mass & volume in gas reactions.\n**Exam Tips:** Check if r.t.p., else use PV=nRT. Molar vol same for all gases at same T/P.",
          },
          {
            name: "1E2: Concentrations of Solutions",
            id: "1E2",
            summary: "**Content:** Expressing and calculating concentrations.\n**Key Points:**\n- Mass conc (g·dm⁻³): mass/volume.\n- Molar conc (mol·dm⁻³): amount/volume.\n- Convert: Conc(mol·dm⁻³) = Conc(g·dm⁻³)/Molar mass.\n- Calc: m = c × V × M.\n- Used in titrations/solution reactions.\n**Exam Tips:** Convert volumes (cm³→dm³). Distinguish mass vs molar conc.",
          },
        ]
      }
    ]
  };

  useEffect(() => {
    if (!svgRef.current || !data) return;

    const width = 1200;
    const height = 800;
    const radius = Math.min(width, height) / 2 * 0.8;

    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [-width / 2, -height / 2, width, height])
      .style('font', '10px sans-serif');

    // Clear previous render
    svg.selectAll('*').remove(); 

    // Create root container for zoom/pan
    const g = svg.append('g');

    // Define the tree layout generator for radial layout
    const tree = d3.tree<MindmapNode>()
      .size([2 * Math.PI, radius])
      .separation((a, b) => (a.parent == b.parent ? 1 : 2) / a.depth);

    // Create the hierarchy from the data
    const root = tree(d3.hierarchy(data)
        .sort((a, b) => d3.ascending(a.data.name, b.data.name)));

    // Set up zoom behavior
    zoomRef.current = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.2, 3]) // Zoom limits
      .on('zoom', (event) => {
        g.attr('transform', event.transform);
        setZoom(event.transform.k);
      });

    // Apply zoom to the SVG element
    svg.call(zoomRef.current);

    // Initial transform: Center the graph and apply initial scale
    const initialTransform = d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8);
    svg.call(zoomRef.current.transform, initialTransform);
    g.attr('transform', initialTransform.toString());


    // Links
    g.append('g')
      .attr('fill', 'none')
      .attr('stroke', '#555')
      .attr('stroke-opacity', 0.4)
      .attr('stroke-width', 1.5)
      .selectAll('path')
      .data(root.links())
      .join('path')
      .attr('d', d3.linkRadial<d3.HierarchyLink<MindmapNode>, d3.HierarchyPointNode<MindmapNode>>()
          .angle(d => d.x)
          .radius(d => d.y));

    // Nodes
    const node = g.append('g')
      .selectAll('g')
      .data(root.descendants())
      .join('g')
      .attr('transform', d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`);

    node.append('circle')
      .attr('r', 4.5)
      .attr('fill', d => d.children ? '#555' : '#999')
      .attr('stroke', '#fff')
      .attr('stroke-width', 1.5)
      .style('cursor', 'pointer')
      .on('click', (event, d) => {
        // Update info content on click
        setInfoContent(d.data.summary || d.data.name);
        setActiveNode(d.data.id); // Set active node id

        // Prevent zoom trigger on node click
        event.stopPropagation();
      });

    // Text labels
    node.append('text')
      .attr('dy', '0.31em')
      .attr('x', d => d.x < Math.PI === !d.children ? 6 : -6)
      .attr('text-anchor', d => d.x < Math.PI === !d.children ? 'start' : 'end')
      .attr('transform', d => d.x >= Math.PI ? 'rotate(180)' : null)
      .text(d => d.data.name)
      .clone(true).lower()
      .attr('stroke', 'white');

  }, [data]); // Rerun effect if data changes

  return (
    <div style={{ display: 'flex', height: '100vh', flexDirection: 'column' }}>
      <div style={{ display: 'flex', padding: '10px', borderBottom: '1px solid #ccc' }}>
        {/* Info Display Area */}
        <div style={{ flexGrow: 1, marginRight: '10px', padding: '10px', border: '1px solid #eee', borderRadius: '4px', minHeight: '80px', maxHeight: '200px', overflowY: 'auto', backgroundColor: '#f9f9f9' }}>
          {infoContent ? (
            <div dangerouslySetInnerHTML={{ __html: infoContent.replace(/\n/g, '<br />') }} />
          ) : (
            <p>Click on a node to see details.</p>
          )}
        </div>
        {/* Zoom Controls */}
        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
          <button onClick={handleZoomIn} style={{ marginBottom: '5px' }}>Zoom In (+)</button>
          <button onClick={handleZoomOut} style={{ marginBottom: '5px' }}>Zoom Out (-)</button>
          <button onClick={handleReset}>Reset</button>
        </div>
      </div>
      <div style={{ flexGrow: 1, overflow: 'hidden' }}>
        <svg ref={svgRef}></svg>
      </div>
    </div>
  );
};

export default ChapterOneMindmap;

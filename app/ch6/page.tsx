'use client';
import React, { useEffect, useRef, useState } from 'react';

import * as d3 from 'd3';

// Define TypeScript interfaces for our data structure
interface MindmapNode {
  name: string;
  id: string; // Unique identifier for the node
  summary?: string; // Optional detailed description
  children?: MindmapNode[];
}

// Define the structure returned by d3.hierarchy
interface HierarchyNode extends d3.HierarchyNode<MindmapNode> {}

// Define the structure for links generated by d3
interface HierarchyLink extends d3.HierarchyLink<MindmapNode> {}

// Define the main component
const EnthalpyMindmap: React.FC = () => {
  const svgRef = useRef<SVGSVGElement>(null);
  const [infoContent, setInfoContent] = useState<string>('');
  const [activeNode, setActiveNode] = useState<string | null>(null);
  const [zoom, setZoom] = useState<number>(1);
  const zoomRef = useRef<d3.ZoomBehavior<SVGSVGElement, unknown> | null>(null);

  // Zoom control handlers
  const handleZoomIn = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 1.3);
    }
  };

  const handleZoomOut = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 0.7);
    }
  };

  const handleReset = () => {
    if (svgRef.current && zoomRef.current) {
      const width = 1200; 
      const height = 800;
      d3.select(svgRef.current)
        .transition()
        .duration(500)
        .call(
          zoomRef.current.transform,
          d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8)
        );
    }
  };

  // Define the data structure for the mindmap
  const data: MindmapNode = {
    name: "Enthalpy and Enthalpy Change",
    id: "root",
    summary: "This mind map covers key concepts related to enthalpy and enthalpy change, including definitions, types of reactions, experimental methods, and applications of Hess's Law and bond enthalpy calculations.",
    children: [
      {
        name: "Introducing Enthalpy",
        id: "introducing-enthalpy",
        summary: "• Definition of Enthalpy Change (ΔH):\n  • ΔH represents the heat energy change in a system during a reaction when the pressure is held constant.\n  • It is measured in joules (J) or kilojoules (kJ) per mole.\n  • A negative ΔH indicates that energy is released (exothermic), whereas a positive ΔH shows that energy is absorbed (endothermic).\n\n• Standard Conditions and Standard Enthalpy Change:\n  • Standard conditions are defined as a pressure of 100 kPa and a specified temperature (usually 298 K or 25 °C).\n  • When reactions occur under these conditions and the substances are in their standard states, the measured enthalpy change is called the standard enthalpy change (denoted ΔH°).",
        children: [
          {
            name: "Types of Energy in Chemistry",
            id: "energy-types",
            summary: "• Chemical Energy:\n  • Made up of two components:\n   – Kinetic Energy: Related to the motion of particles (atoms, molecules, or ions).\n   – Potential Energy: Due to the attractive and repulsive forces among particles (i.e. how strongly they interact).\n  • Changes in chemical energy during a reaction result in the absorption or release of heat.\n\n• Heat Energy:\n  • This is the energy transferred due to a temperature difference between a system and its surroundings.\n  • Heat is measured in joules (J) or kilojoules (kJ).",
          },
          {
            name: "Exothermic vs. Endothermic",
            id: "exo-endo",
            summary: "• Exothermic Reactions/Processes:\n  • In these, heat is transferred from the system to the surroundings (ΔH is negative).\n  • Common examples include:\n   – Freezing water\n   – Condensing water vapor\n   – Dissolving sodium hydroxide in water\n   – Combustion of fuels (e.g., petrol)\n   – Reaction between dilute hydrochloric acid and aqueous sodium hydroxide\n\n• Endothermic Reactions/Processes:\n  • In these, heat is absorbed by the system from the surroundings (ΔH is positive).\n  • Common examples include:\n   – Melting ice\n   – Evaporating water\n   – Dissolving ammonium nitrate in water\n   – Reaction between dilute ethanoic acid and solid sodium hydrogencarbonate\n   – Photosynthesis",
          }
        ]
      },
      {
        name: "Enthalpy Level Diagrams",
        id: "enthalpy-diagrams",
        summary: "• Purpose of Diagrams:\n\n – These diagrams provide a visual representation of the energy changes occurring during a reaction.\n – They display the enthalpy (energy) levels of the reactants and products on a vertical energy scale.\n\n• Key Learning Points:\n\n – Constructing and Interpreting Diagrams:\n  • In an exothermic reaction, the products are at a lower energy level than the reactants, indicating that energy has been released (ΔH is negative).\n  • In an endothermic reaction, the products are positioned at a higher energy level than the reactants because energy is absorbed (ΔH is positive).\n\n – Worked Examples and Analysis:\n  • Example 1: An enthalpy diagram showing the reaction of carbon with oxygen (illustrating a typical exothermic pathway).\n  • Example 2: A diagram for the reaction of carbon with carbon dioxide, demonstrating how the diagram changes based on reactant–product energy differences.",
        children: [
          {
            name: "Constructing Diagrams",
            id: "diagram-construction",
            summary: "When constructing enthalpy level diagrams:\n\n• Always mark the relative positions of reactants and products\n• Include arrows indicating whether energy is absorbed or released\n• Include the numeric value of ΔH\n• In an exothermic reaction, the products are at a lower energy level than the reactants\n• In an endothermic reaction, the products are at a higher energy level than the reactants",
          },
          {
            name: "Interpreting Diagrams",
            id: "diagram-interpretation",
            summary: "When interpreting enthalpy level diagrams:\n\n• The vertical distance between reactants and products represents the enthalpy change (ΔH)\n• Downward arrows indicate exothermic reactions (energy released)\n• Upward arrows indicate endothermic reactions (energy absorbed)\n• The diagram provides a visual representation of the energy changes in a reaction",
          }
        ]
      },
      {
        name: "Standard Enthalpy Change of Combustion",
        id: "combustion-enthalpy",
        summary: "• Definition and Importance:\n\n – Standard Enthalpy Change of Combustion (ΔcH°):\n  • This is the enthalpy change when one mole of a substance is completely combusted (burned) in oxygen under standard conditions.\n  • It is a key measurement for comparing the energy output of different fuels.",
        children: [
          {
            name: "Experimental Determination",
            id: "combustion-experiment",
            summary: "• Methods and Apparatus:\n  • A typical experiment involves burning a known mass of a liquid fuel (such as ethanol) beneath a calorimeter containing a measured mass of water.\n  • Instruments used include a calorimeter, thermometer (to measure temperature rise), a burner, and measuring devices for fuel mass and water volume.\n\n• Calculation Stages:\n\n  1. Calculating the Heat Energy Transferred (Q):\n   • Use the equation:\n     Q = m × c × ΔT\n      – m = mass of water (in g)\n      – c = specific heat capacity (for water, approximately 4.18 J g⁻¹ K⁻¹)\n      – ΔT = change in temperature (in °C or K)\n\n  2. Determining the Amount of Substance Combusted:\n   • Calculate the number of moles (n) of the fuel burned:\n     n = (mass of fuel burned) / (molar mass of the fuel)\n\n  3. Computing ΔcH°:\n   • Determine the standard enthalpy change of combustion using:\n     ΔcH° = – Q/n\n     (The negative sign indicates that combustion is an exothermic process.)",
          },
          {
            name: "Sources of Error",
            id: "combustion-errors",
            summary: "• Sources of Experimental Error:\n  • Heat loss to the surroundings due to imperfect insulation.\n  • Incomplete combustion, which may result in soot formation.\n  • Evaporation or loss of the fuel before complete combustion.\n  • Neglecting the heat absorbed by the calorimeter itself.\n\n• Assumptions:\n  • The density of water is taken as 1 g cm⁻³.\n  • All heat released is assumed to be absorbed solely by the water.",
          }
        ]
      },
      {
        name: "Standard Enthalpy Change of Neutralisation",
        id: "neutralisation-enthalpy",
        summary: "• Definition:\n\n – Standard Enthalpy Change of Neutralisation (ΔneutH°):\n  • This is the enthalpy change when one mole of water is produced in the neutralisation reaction between an acid and a base under standard conditions.\n  • For many strong acid–strong base reactions, ΔneutH° typically has a consistent value (approximately –57 kJ mol⁻¹).",
        children: [
          {
            name: "Experimental Approach",
            id: "neutralisation-experiment",
            summary: "• Performing Titrations:\n  • A measured volume of an acid (with an unknown or known concentration) is placed in an insulated container (e.g., a polystyrene cup).\n  • A base of known concentration (e.g., 1.00 mol dm⁻³ sodium hydroxide) is added gradually from a burette.\n  • The temperature of the mixture is recorded before, during, and after the reaction until the temperature change (ΔT) reaches a maximum (or minimum).\n\n• Calculating the Energy Change:\n  • As in combustion experiments, use the formula:\n    Q = m × c × ΔT\n  • Here, m represents the total mass of the solution (assuming a density of 1 g cm⁻³), and c is the specific heat capacity (usually 4.18 J g⁻¹ K⁻¹).\n  • To find ΔneutH° on a per mole basis, divide Q by the number of moles of water formed (which is equivalent to the number of moles of acid or base, depending on the reaction stoichiometry).",
          },
          {
            name: "Error Analysis",
            id: "neutralisation-errors",
            summary: "• Measurement Uncertainties:\n  • Volume measurements using pipettes and burettes carry inherent uncertainties (e.g., ±0.05 cm³).\n  • Thermometer precision (±0.1 °C) can also affect the calculated ΔT.\n\n• Procedural Errors:\n  • Inadequate mixing can lead to uneven temperature distribution.\n  • Heat loss to surroundings if the insulation is not optimal.\n\n• Minimisation Strategies:\n  • Calibrate instruments carefully, and perform experiments in well‐insulated setups.\n  • Repeat measurements and average the results to reduce random errors.",
          }
        ]
      },
      {
        name: "Standard Enthalpy Change of Formation and Hess's Law",
        id: "formation-enthalpy-hess",
        summary: "• Core Concepts:\n\n – Standard Enthalpy Change of Formation (ΔfH°):\n  • Defined as the enthalpy change when one mole of a compound is formed from its constituent elements in their standard states.\n  • For example, the formation of methane can be represented by:\n    C(graphite) + 2H₂(g) → CH₄(g)\n    ΔfH° is measured under standard conditions.\n\n – Constructing Enthalpy Cycles:\n  • These are diagrams that represent different pathways (or reaction sequences) to the same final state.\n  • They are fundamental for applying Hess's Law to calculate unknown enthalpy changes.",
        children: [
          {
            name: "Application of Hess's Law",
            id: "hess-law-application",
            summary: "• Hess's Law Principle:\n  • The total enthalpy change for a reaction is the same, regardless of the pathway or number of steps, provided the initial and final conditions are identical.\n\n• Two Primary Methods:\n\n  1. Subtracting Equations:\n   • Algebraically add or subtract known reactions (and their associated ΔH values) to determine an unknown enthalpy change.\n  2. Using Enthalpy Cycles:\n   • Construct cycles that include the formation (or combustion) steps of reactants and products.\n   • The unknown ΔfH° can be derived by ensuring that the sum of enthalpy changes around the cycle equals zero.",
          },
          {
            name: "Worked Examples",
            id: "hess-examples",
            summary: "• An enthalpy cycle for calculating the standard enthalpy change of formation of carbon monoxide from graphite and oxygen is provided.\n• Other examples include using combustion data for methanol (CH₃OH), calcium carbonate, and even hydration processes such as that for anhydrous copper(II) sulfate.\n\n• Exam Checkpoints:\n  • Be prepared to write balanced equations that represent the formation process.\n  • Calculate ΔfH° for given reactions by applying the appropriate stoichiometric coefficients and using experimental data where needed.\n  • Some questions might require you to combine known data (for example, relating the reaction of lithium with water to deduce the formation enthalpy of lithium hydroxide).",
          }
        ]
      },
      {
        name: "Bond Enthalpy and Hess's Law",
        id: "bond-enthalpy",
        summary: "• Key Definitions:\n\n – Bond Enthalpy:\n  • The bond enthalpy of a particular bond (e.g., X—Y) is defined as the energy required to break one mole of that bond in the gas phase, producing separate gaseous atoms.\n  • It is always a positive value since energy input is required to break bonds.\n\n – Mean Bond Enthalpy:\n  • This is the average energy required to break a specific type of bond across a range of similar compounds.\n  • It is denoted by E(bond), for example, E(C–C) for a carbon–carbon bond.",
        children: [
          {
            name: "Calculating Reaction Enthalpy",
            id: "reaction-enthalpy-calc",
            summary: "• Calculating Reaction Enthalpy Changes:\n  • A general approximation for the enthalpy change of a reaction is:\n    ΔH₍reaction₎ ≈ (Total energy required for bonds broken) – (Total energy released for bonds formed)\n  • The bonds that are broken contribute energy (endothermic process) and those that are formed release energy (exothermic process).",
          },
          {
            name: "Reaction Kinetics Insights",
            id: "reaction-kinetics",
            summary: "• Insights into Reaction Kinetics:\n  • Bond enthalpy values can indicate which bonds are \"weaker\" or \"stronger.\"\n  • Weaker bonds, which require less energy to break, may break first, affecting the reaction mechanism and rate.\n\n• Worked Examples and Checkpoints:\n  • Tasks may include writing the bond dissociation equations (for example, for the H–I bond) and then calculating the mean bond enthalpy using provided data.\n  • Other examples include finding the mean O–H bond energy in water or comparing the C–H bond energies in different compounds (methane vs. ethane).\n  • Successive bond breaking in molecules like ammonia (NH₃) is also explored to calculate a mean value.",
          },
          {
            name: "Using Mean Bond Enthalpies",
            id: "mean-bond-enthalpies",
            summary: "• Practical Applications:\n\n – Using Mean Bond Enthalpies to Estimate Reaction Enthalpy Changes:\n  • Identify all bonds broken in the reactants and all bonds formed in the products.\n  • Apply the formula:\n    ΔH₍reaction₎ ≈ Σ[Bond enthalpies of bonds broken] – Σ[Bond enthalpies of bonds formed]\n  • This method gives an approximate value for the reaction enthalpy.\n\n – Limitations:\n  • Since mean bond enthalpies are averaged values, the actual bond enthalpy in a specific molecule may differ due to its molecular environment.\n  • These values are typically determined for gaseous species, so discrepancies may arise when comparing with experimental data in other phases.",
          },
          {
            name: "Additional Concepts",
            id: "additional-concepts",
            summary: "• Additional Concepts:\n\n – Standard Enthalpy Change of Atomisation (ΔatH°):\n  • Defined as the enthalpy change when one mole of gaseous atoms is produced from the element in its standard state.\n  • This process is endothermic because it involves breaking all the bonds in the elemental form.\n\n – Deriving Mean Bond Enthalpies from Experimental Data:\n  • Sometimes overall ΔH for a reaction is known, and one or more bond enthalpies are unknown.\n  • By rearranging the bond enthalpy equation, the \"missing\" bond energy can be calculated from the experimental reaction data.",
          }
        ]
      },
      {
        name: "Real-World Applications",
        id: "real-world-applications",
        summary: "• Real-World Applications:\n  • In fuel analysis, comparing the standard enthalpy changes of combustion helps determine the most energy-efficient fuel.\n  • In renewable energy research, understanding bond energetics is crucial for the design of biofuels and for converting biomass into valuable platform chemicals (for example, the potential of levulinic acid and furfural as platform molecules).\n\n• Connection Between Bond Energetics and Reaction Rates:\n  • While a reaction's overall ΔH may be favorable, the activation energy (often influenced by which bonds must break first) determines the reaction rate.\n  • This knowledge is key for organic chemists, particularly when assessing reactivity and designing catalysts.",
      }
    ]
  };

  // Use effect hook for D3 logic
  useEffect(() => {
    if (!svgRef.current) return;

    const width = 1200;
    const height = 800;
    const radius = Math.min(width, height) / 2 * 0.9;

    // Select the SVG element and clear previous content
    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [-width / 2, -height / 2, width, height])
      .style('font', '10px sans-serif');
    svg.selectAll("*").remove(); // Clear previous render

    // Create root group centered in SVG
    const g = svg.append('g');

    // Create tree layout generator
    const treeLayout = d3.tree<MindmapNode>()
      .size([2 * Math.PI, radius])
      .separation((a, b) => (a.parent == b.parent ? 1 : 2) / a.depth);

    // Create hierarchy from data
    const root = d3.hierarchy(data);

    // Generate the tree layout
    const treeData = treeLayout(root);

    // Add links between nodes
    const link = g.append("g")
      .attr("fill", "none")
      .attr("stroke", "#ccc") // Lighter link color
      .attr("stroke-opacity", 0.7)
      .attr("stroke-width", 1.5)
      .selectAll("path")
      .data(treeData.links())
      .join("path")
      .attr("d", d3.linkRadial<any, d3.HierarchyPointNode<MindmapNode>>() // Type hint for node data
        .angle(node => node.x) // Access angle from the node object
        .radius(node => node.y)); // Access radius from the node object

    // Add nodes with colors based on depth
    const colorScale = d3.scaleOrdinal<string, string>() // Domain type string (depth as string)
      .domain(["0", "1", "2", "3", "4"]) // Max depth assumed 4
      .range(["#4299E1", "#48BB78", "#F6AD55", "#F56565", "#9F7AEA"]);

    // Add nodes
    const node = g.append("g")
      .attr("stroke-linejoin", "round")
      .attr("stroke-width", 3)
      .selectAll("g")
      .data(treeData.descendants())
      .join("g")
      .attr("transform", d => `
        rotate(${(d.x * 180 / Math.PI - 90)}) 
        translate(${d.y},0)
      `);

    // Add node circles WITH HOVER EFFECT
    node.append("circle")
      .attr("fill", (d: any) => colorScale(d.depth.toString())) // Use string depth for colorScale
      .attr("r", d => d.data.id === "root" ? 10 : 6)
      .style("cursor", "pointer")
      .on("click", (event: MouseEvent, d: any) => {
        setActiveNode(d.data.id);
        setInfoContent(d.data.summary || `${d.data.name} - No summary available.`);
      })
      .on("mouseover", (event: MouseEvent, d: any) => {
        // Cast currentTarget to SVGCircleElement for d3.select
        d3.select(event.currentTarget as SVGCircleElement).attr('r', (d: any) => d.data.id === 'root' ? 12 : 8).attr('stroke', 'black'); // Enlarge and highlight on hover
      })
      .on("mouseout", (event: MouseEvent, d: any) => {
          // Cast currentTarget to SVGCircleElement for d3.select
          d3.select(event.currentTarget as SVGCircleElement).attr('r', (d: any) => d.data.id === 'root' ? 10 : 6).attr('stroke', null); // Revert size and highlight
      });

    // Add node text labels - Rotate First, Then Translate
    const text = node.append("text")
      // Remove x attribute, position is handled by translate
      .attr("x", null)
      .attr("transform", (d: any) => {
        const inverseRotation = -(d.x * 180 / Math.PI - 90);
        const horizontalOffset = d.x < Math.PI ? 8 : -8;
        // Apply rotation around origin (0,0) first, then translate horizontally
        return `rotate(${inverseRotation}) translate(${horizontalOffset}, 0)`; 
      })
      .attr("dy", "0.31em") // Vertical alignment
      .attr("text-anchor", (d: any) => d.x < Math.PI ? "start" : "end") // Anchor based on left/right side
      .attr("fill", (d: any) => colorScale(d.depth.toString())) // Use string depth for colorScale
      .style("font-size", "10px")
      .style("font-weight", "bold")
      .style("pointer-events", "none") // Avoid interfering with circle click
      .text((d: any) => d.data.name);
      
    // Set initial content
    setInfoContent("Click on any node to see detailed information about that topic.");

    // Setup zoom behavior
    const zoomBehavior = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.3, 3])
      .on("zoom", (event: d3.D3ZoomEvent<SVGSVGElement, unknown>) => {
        g.attr("transform", event.transform.toString());
        setZoom(event.transform.k);
      });

    // Store zoom behavior in ref for external control
    zoomRef.current = zoomBehavior;

    // Apply zoom behavior to SVG
    svg.call(zoomBehavior)
      .on("dblclick.zoom", null); // Disable double-click zoom

    // Initialize with a slight zoom out
    const initialTransform = d3.zoomIdentity.translate(0, 0).scale(0.8); // Centered by viewBox
    svg.call(zoomBehavior.transform, initialTransform);

  }, []); // Empty dependency array: run only once on mount

  // Find the name of the active node for the title
  const findNodeName = (nodeId: string | null, nodeData: MindmapNode): string | null => {
    if (!nodeId) return null;
    if (nodeData.id === nodeId) return nodeData.name;
    if (nodeData.children) {
      for (const child of nodeData.children) {
        const found = findNodeName(nodeId, child);
        if (found) return found;
      }
    }
    return null;
  };
  const activeNodeName = findNodeName(activeNode, data);

  return (
    <div className="flex flex-col w-full h-screen bg-gray-800 text-white"> {/* Full height, dark theme */}
      <div className="p-2 bg-gray-700 text-center sticky top-0 z-10">
        <h1 className="text-xl font-semibold">Chapter 8: Enthalpy and Enthalpy Change</h1>
      </div>
      
      <div className="flex-grow flex flex-col md:flex-row overflow-hidden"> {/* Use flex-grow */} 
        {/* Mindmap Area */} 
        <div className="w-full md:w-2/3 h-2/3 md:h-full overflow-hidden relative bg-gray-900"> {/* Darker background for SVG */}
          <svg ref={svgRef} className="w-full h-full"></svg>
        </div>
        
        {/* Information Panel */} 
        <div className="w-full md:w-1/3 h-1/3 md:h-full p-4 bg-gray-700 overflow-y-auto border-t md:border-t-0 md:border-l border-gray-600">
          <div className="bg-gray-800 rounded-lg shadow p-4">
            <h2 className="text-lg font-semibold mb-2">
              {activeNodeName || "Topic Information"} {/* Show active node name */} 
            </h2>
            <div className="prose prose-invert max-w-none text-gray-300 whitespace-pre-line"> {/* Added whitespace-pre-line to preserve line breaks */} 
              {infoContent ? (
                <p>{infoContent}</p>
              ) : (
                <p>Click on a node in the mindmap to see detailed information.</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnthalpyMindmap;
'use client';
import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

// Define TypeScript interfaces for our data structure
interface MindmapNode {
  name: string;
  id: string; // Unique identifier for the node
  summary?: string; // Optional detailed description
  children?: MindmapNode[];
}

// Define the structure returned by d3.hierarchy
interface HierarchyNode extends d3.HierarchyNode<MindmapNode> {}

// Define the structure for links generated by d3
interface HierarchyLink extends d3.HierarchyLink<MindmapNode> {}

// Define the main component
const ChapterTwoMindmap: React.FC = () => { 
  const svgRef = useRef<SVGSVGElement>(null);
  const [infoContent, setInfoContent] = useState<string>('');
  const [activeNode, setActiveNode] = useState<string | null>(null);
  const [zoom, setZoom] = useState<number>(1);
  const zoomRef = useRef<d3.ZoomBehavior<SVGSVGElement, unknown> | null>(null);

  // Zoom control handlers
  const handleZoomIn = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 1.3);
    }
  };

  const handleZoomOut = () => {
    if (svgRef.current && zoomRef.current) {
      d3.select(svgRef.current)
        .transition()
        .duration(300)
        .call(zoomRef.current.scaleBy, 0.7);
    }
  };

  const handleReset = () => {
    if (svgRef.current && zoomRef.current) {
      const width = 1200;
      const height = 800;
      d3.select(svgRef.current)
        .transition()
        .duration(500)
        .call(
          zoomRef.current.transform,
          d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8)
        );
    }
  };

  // Define the data structure for the mindmap
  const data: MindmapNode = {
    name: "Topic 2: Atomic Structure and the Periodic Table",
    id: "root",
    summary: "Understanding the building blocks of matter and their arrangement in the Periodic Table",
    children: [
      {
        name: "2A: Atomic Structure",
        id: "2A",
        summary: "Atoms, electrons and nuclei",
        children: [
          {
            name: "2A1: Structure of the Atom & Isotopes",
            id: "2A1",
            summary: "**Content:** Understanding the subatomic particles and how they form atoms of different elements.\n**Key Points:**\n- Atoms consist of protons, neutrons (in the nucleus) and electrons (in energy levels/shells)\n- Protons have a relative mass of 1 and charge of +1\n- Neutrons have a relative mass of 1 and no charge\n- Electrons have negligible mass (1/1840) and charge of -1\n- Atomic number (Z) = number of protons = number of electrons in a neutral atom\n- Mass number (A) = number of protons + number of neutrons\n- Isotopes are atoms with the same atomic number but different mass numbers\n- Isotopes have the same chemical properties but different physical properties\n**Exam Tips:** Questions often involve calculating numbers of subatomic particles in atoms or ions. Remember that in a positive ion, the number of electrons is less than the number of protons; in a negative ion, it's more."
          },
          {
            name: "2A2: Mass Spectrometry & Relative Masses",
            id: "2A2",
            summary: "**Content:** How we determine the masses of atoms, isotopes, and molecules using mass spectrometry.\n**Key Points:**\n- Mass spectrometry measures the mass-to-charge (m/z) ratio of ions\n- Process: vaporization → ionization → acceleration → deflection → detection\n- Relative isotopic mass is the mass of an isotope compared to 1/12 the mass of a carbon-12 atom\n- Relative atomic mass (Ar) is the weighted average of the isotopic masses in a naturally occurring sample\n- Calculation: Ar = Σ(isotopic mass × fractional abundance)\n- For diatomic molecules (e.g., Cl₂), the mass spectrum shows peaks for all possible combinations of isotopes\n- Molecular ion peak (M⁺) corresponds to the intact molecular ion, which helps identify molecules\n**Exam Tips:** Practice calculating relative atomic mass from isotopic abundance data. For mass spectra of diatomic molecules like Cl₂, remember that the pattern of peaks follows probability rules based on the abundance of each isotope."
          },
          {
            name: "2A3: Atomic Orbitals & Electronic Configurations",
            id: "2A3",
            summary: "**Content:** How electrons are arranged in atoms and how this determines their chemical behavior.\n**Key Points:**\n- Quantum shells are main energy levels (n = 1, 2, 3, etc.)\n- Sub-shells (s, p, d, f) have different shapes and energies within each shell\n- s orbitals are spherical, p orbitals are dumbbell-shaped\n- Maximum electrons: s orbital (2), p subshell (6), d subshell (10), f subshell (14)\n- Electrons fill orbitals in order of increasing energy (Aufbau principle)\n- Electrons occupy orbitals singly before pairing (Hund's rule)\n- Two electrons in the same orbital must have opposite spins (Pauli Exclusion Principle)\n- Electronic configuration can be written using: 1s², 2s², 2p⁶, etc. or using noble gas notation [Ne]3s²3p³\n**Exam Tips:** Pay attention to exceptions in the d-block (e.g., Cr: [Ar]3d⁵4s¹ instead of [Ar]3d⁴4s²). Know how to represent electronic configurations using box diagrams to show unpaired electrons."
          },
          {
            name: "2A4: Ionisation Energies",
            id: "2A4",
            summary: "**Content:** The energy required to remove electrons from atoms and ions, and what this tells us about atomic structure.\n**Key Points:**\n- First ionisation energy: energy to remove one electron from each atom in one mole of gaseous atoms\n- Second and subsequent ionisation energies refer to removing additional electrons\n- Ionisation energies always increase as more electrons are removed\n- Large jumps in successive ionisation energies indicate the start of a new shell\n- Factors affecting ionisation energy: nuclear charge, distance from nucleus, electron shielding, electron-electron repulsion\n- Across a period: generally increases due to increasing nuclear charge\n- Down a group: decreases due to increased shielding and distance from nucleus\n- Anomalies exist between Groups 2-3 and 5-6 due to electron configuration\n**Exam Tips:** Be able to explain trends in ionisation energy both across periods and down groups. Know the reasons for anomalies (e.g., Be→B and N→O) in terms of electron configurations and shielding effects."
          }
        ]
      },
      {
        name: "2B: The Periodic Table",
        id: "2B",
        summary: "Organization and patterns",
        children: [
          {
            name: "2B1: The Periodic Table",
            id: "2B1",
            summary: "**Content:** How elements are arranged in the Periodic Table and what this tells us about their properties.\n**Key Points:**\n- Elements are arranged by increasing atomic number\n- Vertical columns are groups (elements with similar chemical properties)\n- Horizontal rows are periods (elements with the same number of electron shells)\n- s-block: Groups 1-2 (alkali metals, alkaline earth metals)\n- p-block: Groups 3-8/13-18 (B to He/Ne/Ar/etc.)\n- d-block: transition metals\n- f-block: lanthanides and actinides\n- Group number equals number of outer shell electrons (main groups)\n**Exam Tips:** Remember that similar electronic configurations lead to similar chemical properties. Be able to predict the block an element belongs to from its position in the Periodic Table or its electronic configuration."
          },
          {
            name: "2B2: Periodic Properties",
            id: "2B2",
            summary: "**Content:** Patterns and trends in physical and chemical properties across the Periodic Table.\n**Key Points:**\n- Atomic radius: decreases across a period, increases down a group\n- Ionisation energy: generally increases across a period, decreases down a group\n- Electron affinity: generally becomes more negative across a period\n- Electronegativity: increases across a period, decreases down a group\n- Melting/boiling points: vary based on structure and bonding\n- Metallic character: decreases across a period, increases down a group\n- Reactivity of metals: increases down Group 1, decreases down Group 2\n- Reactivity of non-metals: decreases down Groups 6 and 7\n**Exam Tips:** Be able to explain periodic trends in terms of atomic structure and electron configurations. For physical properties like melting points, consider the type of structure and bonding (metallic, ionic, covalent-molecular, covalent-giant)."
          }
        ]
      },
      {
        name: "TB: Thinking Bigger",
        id: "TB",
        summary: "Applications & extensions",
        children: [
          {
            name: "TB1: Elemental Fingerprints",
            id: "TB1",
            summary: "**Content:** How spectroscopy allows us to identify elements in distant stars and galaxies.\n**Key Points:**\n- Each element produces a unique set of spectral lines when excited\n- Emission spectrum: bright lines at specific wavelengths emitted by excited atoms\n- Absorption spectrum: dark lines where light has been absorbed by atoms\n- Spectral lines are like 'fingerprints' that identify elements\n- This technique allows astronomers to determine the composition of stars\n- Red shift in spectral lines provides evidence for an expanding universe\n- Fraunhofer lines in the solar spectrum were the first observed absorption lines\n**Exam Tips:** Understand the difference between emission and absorption spectra, and how they're produced. Know how spectroscopy can be used to identify elements in samples and distant celestial objects."
          }
        ]
      }
    ]
  };

  useEffect(() => {
    if (!svgRef.current || !data) return;

    const width = 1200;
    const height = 800;
    const radius = Math.min(width, height) / 2 * 0.8;

    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [-width / 2, -height / 2, width, height])
      .style('font', '10px sans-serif');

    // Clear previous render
    svg.selectAll('*').remove(); 

    // Create root container for zoom/pan
    const g = svg.append('g');

    // Define the tree layout generator for radial layout
    const tree = d3.tree<MindmapNode>()
      .size([2 * Math.PI, radius])
      .separation((a, b) => (a.parent == b.parent ? 1 : 2) / a.depth);

    // Create the hierarchy from the data
    const root = tree(d3.hierarchy(data)
        .sort((a, b) => d3.ascending(a.data.name, b.data.name)));

    // Set up zoom behavior
    zoomRef.current = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.2, 3]) // Zoom limits
      .on('zoom', (event) => {
        g.attr('transform', event.transform);
        setZoom(event.transform.k);
      });

    // Apply zoom to the SVG element
    svg.call(zoomRef.current);

    // Initial transform: Center the graph and apply initial scale
    const initialTransform = d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8);
    svg.call(zoomRef.current.transform, initialTransform);
    g.attr('transform', initialTransform.toString());


    // Links
    g.append('g')
      .attr('fill', 'none')
      .attr('stroke', '#555')
      .attr('stroke-opacity', 0.4)
      .attr('stroke-width', 1.5)
      .selectAll('path')
      .data(root.links())
      .join('path')
      .attr('d', d3.linkRadial<d3.HierarchyLink<MindmapNode>, d3.HierarchyPointNode<MindmapNode>>()
          .angle(d => d.x)
          .radius(d => d.y));

    // Nodes
    const node = g.append('g')
      .selectAll('g')
      .data(root.descendants())
      .join('g')
      .attr('transform', d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`);

    node.append('circle')
      .attr('r', 4.5)
      .attr('fill', d => d.children ? '#555' : '#999')
      .attr('stroke', '#fff')
      .attr('stroke-width', 1.5)
      .style('cursor', 'pointer')
      .on('click', (event, d) => {
        // Update info content on click
        setInfoContent(d.data.summary || d.data.name);
        setActiveNode(d.data.id); // Set active node id

        // Prevent zoom trigger on node click
        event.stopPropagation();
      });

    // Text labels
    node.append('text')
      .attr('dy', '0.31em')
      .attr('x', d => d.x < Math.PI === !d.children ? 6 : -6)
      .attr('text-anchor', d => d.x < Math.PI === !d.children ? 'start' : 'end')
      .attr('transform', d => d.x >= Math.PI ? 'rotate(180)' : null)
      .text(d => d.data.name)
      .clone(true).lower()
      .attr('stroke', 'white');

  }, [data]); // Rerun effect if data changes

  return (
    <div style={{ display: 'flex', height: '100vh', flexDirection: 'column' }}>
      <div style={{ display: 'flex', padding: '10px', borderBottom: '1px solid #ccc' }}>
        {/* Info Display Area */}
        <div style={{ flexGrow: 1, marginRight: '10px', padding: '10px', border: '1px solid #eee', borderRadius: '4px', minHeight: '80px', maxHeight: '200px', overflowY: 'auto', backgroundColor: '#f9f9f9' }}>
          {infoContent ? (
            <div dangerouslySetInnerHTML={{ __html: infoContent.replace(/\n/g, '<br />') }} />
          ) : (
            <p>Click on a node to see details.</p>
          )}
        </div>
        {/* Zoom Controls */}
        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
          <button onClick={handleZoomIn} style={{ marginBottom: '5px' }}>Zoom In (+)</button>
          <button onClick={handleZoomOut} style={{ marginBottom: '5px' }}>Zoom Out (-)</button>
          <button onClick={handleReset}>Reset</button>
        </div>
      </div>
      <div style={{ flexGrow: 1, overflow: 'hidden' }}>
        <svg ref={svgRef}></svg>
      </div>
    </div>
  );
};

export default ChapterTwoMindmap;
